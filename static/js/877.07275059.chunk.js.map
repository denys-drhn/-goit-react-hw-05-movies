{"version":3,"file":"static/js/877.07275059.chunk.js","mappings":"oKA8BA,IA3BmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,YAAoC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,GACpC,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMR,GAA1C,SACGG,GAASC,KAFLC,EAMZ,KAGN,C,4HCjBD,GAAiB,E,SCsDjB,EAnDkB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACnB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAyBA,OACE,gBAAKC,UAAWC,EAAAA,UAAhB,UACE,kBAAMD,UAAWC,EAAAA,WAAgBP,SArBhB,SAAAQ,GAEnB,GADAA,EAAMC,iBACgB,KAAlBP,EAAOQ,OAAX,CAMA,GAAIR,IAAWE,EAGb,OAFAO,MAAM,qBACNR,EAAU,IAIZE,EAAcH,GACdF,EAASE,GACTC,EAAU,GAVT,MAFCQ,MAAM,kCAaT,EAIG,WACE,kBACEL,UAAWC,EAAAA,gBACXK,KAAK,SACLC,MAAOX,EACPY,SA9Ba,SAAAN,GACnBL,EAAUK,EAAMO,cAAcF,MAAMG,cACrC,EA6BOC,KAAK,OACLC,aAAa,KACbC,WAAS,KAEX,mBAAQF,KAAK,SAASX,UAAWC,EAAAA,iBAAjC,wBAMP,E,SC5CKa,EAAoB,mCAAG,WAAMC,GAAN,gGAEFC,EAAAA,EAAAA,IAAA,UAJV,+BAIU,iBAAsC,CAC3DC,OAAQ,CACNC,QAPQ,mCAQRC,SAAU,QACVC,MAAOL,EACPM,KAAM,EACNC,eAAe,KARM,cAEnBC,EAFmB,yBAWlBA,EAASC,KAAKC,SAXI,gCAazBC,QAAQC,IAAR,MAbyB,yDAAH,sDAgB1B,I,kBCyCA,EAvDe,WACb,OAA4BhC,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAe4C,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCpC,EAAAA,EAAAA,WAAS,GAA3C,eAAOqC,EAAP,KAAkBC,EAAlB,KAIMb,EAAQU,EAAaI,IAAI,UAAY,IAE3CC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGAEhBH,GAAa,GAFG,SAGSnB,EAAqBM,GAH9B,UAKU,KAFpBiB,EAHU,QAKDC,OALC,yCAMPjC,MAAM,4BANC,OAShBuB,EAAUS,GATM,kDAWhBX,QAAQa,MAAR,MACAlC,MAAM,wBAZU,yBAchB4B,GAAa,GAdG,6EAAH,qDAkBH,KAAVb,GAIJgB,GACD,GAAE,CAAChB,IAMJ,OACE,4BACE,0BACE,SAAC,EAAD,CAAW1B,SAPQ,SAAAE,GACvBmC,EAAgB,CAAEX,MAAOxB,GAC1B,MAQIoC,GACC,gBAAKhC,UAAU,SAAf,UACE,SAAC,KAAD,CAAcwC,MAAM,MAAMC,MAAM,eAGlC,SAACC,EAAA,EAAD,CAAY1D,OAAQA,MAI3B,C","sources":["components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.jsx","services/fetchMoviesByKeyword.js","pages/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(({ title, original_title, id }) => {\n        return (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title || original_title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      original_title: PropTypes.string,\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Searchbar.module.css';\n\nconst Searchbar = ({ onSubmit }) => {\n  const [search, setSearch] = useState('');\n  const [prevSearch, setPrevSearch] = useState('');\n\n  const handleChange = event => {\n    setSearch(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (search.trim() === '') {\n      // если строка пустая и мbl нажали кнопку поиска\n      alert('Please, fill in the input field');\n      return;\n    }\n    // проверка на одинаковое слово\n    if (search === prevSearch) {\n      alert('Same request');\n      setSearch('');\n      return;\n    }\n\n    setPrevSearch(search);\n    onSubmit(search); // передаем поисковый запрос в функцию onSubmit\n    setSearch(''); // reset\n  };\n\n  return (\n    <div className={css.Searchbar}>\n      <form className={css.SearchForm} onSubmit={handleSubmit}>\n        <input\n          className={css.SearchFormInput}\n          name=\"search\"\n          value={search}\n          onChange={handleChange}\n          type=\"text\"\n          autoComplete=\"on\"\n          autoFocus\n        />\n        <button type=\"submit\" className={css.SearchFormButton}>\n          Search\n        </button>\n      </form>\n    </div>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import axios from 'axios';\n\nconst API_KEY = 'a4c701b3a41d7d3c7de995b9f81d852d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst fetchMoviesByKeyword = async keyword => {\n  try {\n    const response = await axios.get(`${BASE_URL}/search/movie`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        query: keyword,\n        page: 1,\n        include_adult: false,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport default fetchMoviesByKeyword;\n","import { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport fetchMoviesByKeyword from 'services/fetchMoviesByKeyword';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { InfinitySpin } from 'react-loader-spinner';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  // получаем значение поискового запроса из хука useSearchParams,\n  // в коториьlй мьl передали из handleFormSubmit -> из Serchbar - handleSubmit - onSubmit(search);\n  const query = searchParams.get('query') || '';\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        setIsLoading(true); // показываем loader\n        const moviesData = await fetchMoviesByKeyword(query);\n\n        if (moviesData.length === 0) {\n          return alert('No movies by your query');\n        }\n\n        setMovies(moviesData);\n      } catch (error) {\n        console.error(error);\n        alert('Something went wrong');\n      } finally {\n        setIsLoading(false); // скрываем loader\n      }\n    };\n\n    if (query === '') {\n      return;\n    }\n\n    fetchMovies();\n  }, [query]);\n\n  const handleFormSubmit = search => {\n    setSearchParams({ query: search });\n  };\n\n  return (\n    <div>\n      <div>\n        <Searchbar onSubmit={handleFormSubmit} />\n      </div>\n\n      {isLoading ? (\n        <div className=\"loader\">\n          <InfinitySpin width=\"200\" color=\"#4fa94d\" />\n        </div>\n      ) : (\n        <MoviesList movies={movies} />\n      )}\n    </div>\n  );\n};\nexport default Movies;\n"],"names":["movies","location","useLocation","map","title","original_title","id","to","state","from","onSubmit","useState","search","setSearch","prevSearch","setPrevSearch","className","css","event","preventDefault","trim","alert","name","value","onChange","currentTarget","toLowerCase","type","autoComplete","autoFocus","fetchMoviesByKeyword","keyword","axios","params","api_key","language","query","page","include_adult","response","data","results","console","log","setMovies","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","get","useEffect","fetchMovies","moviesData","length","error","width","color","MoviesList"],"sourceRoot":""}