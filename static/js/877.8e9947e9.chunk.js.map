{"version":3,"file":"static/js/877.8e9947e9.chunk.js","mappings":"2JA8BA,IA3BmB,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC5B,OACE,wBACGD,EAAOE,KAAI,YAAoC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,GACpC,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMP,GAA1C,SACGE,GAASC,KAFLC,EAMZ,KAGN,C,qIChBD,GAAiB,E,SC+DjB,EA3DkB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACnB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAIAC,QAAQC,IAAIH,GAgCZ,OACE,gBAAKI,UAAWC,EAAAA,UAAhB,UACE,kBAAMD,UAAWC,EAAAA,WAAgBZ,SAvBhB,SAAAa,GAEnB,GADAA,EAAMC,iBACgB,KAAlBZ,EAAOa,OAAX,CAMA,GAAIb,IAAWE,EAGb,OAFAY,MAAM,qBACNb,EAAU,IAMZH,EAASE,GACTG,EAAcH,GACdC,EAAU,GAZT,MAFCa,MAAM,kCAeT,EAIG,WACE,kBACEL,UAAWC,EAAAA,gBACXK,KAAK,SACLC,MAAOhB,EACPiB,SAtCa,SAAAN,GACnBV,EAAUU,EAAMO,cAAcF,MAAMG,eAEY,KAA5CR,EAAMO,cAAcF,MAAMG,cAC5Bb,EAAgB,CAAC,GAEjBA,EAAgB,CAAEc,MAAOT,EAAMO,cAAcF,MAAMG,eAEtD,EA+BOE,KAAK,OACLC,aAAa,KACbC,WAAS,KAEX,mBAAQF,KAAK,SAASZ,UAAWC,EAAAA,iBAAjC,wBAMP,E,SCzDKc,EAAoB,mCAAG,WAAMC,GAAN,gGAEFC,EAAAA,EAAAA,IAAA,UAJV,+BAIU,iBAAsC,CAC3DC,OAAQ,CACNC,QAPQ,mCAQRC,SAAU,QACVT,MAAOK,EACPK,KAAM,EACNC,eAAe,KARM,cAEnBC,EAFmB,yBAWlBA,EAASC,KAAKC,SAXI,gCAazB3B,QAAQC,IAAR,MAbyB,yDAAH,sDAgB1B,I,SCmBA,EAlCe,WACb,OAA0BT,EAAAA,EAAAA,UAAS,IAAnC,eAAOqB,EAAP,KAAce,EAAd,KACA,GAA4BpC,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAe+C,EAAf,KACM9C,GAAW+C,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGACOf,EAAqBJ,GAD5B,UAEQ,KADpBoB,EADY,QAEHC,OAFG,yCAGT3B,MAAM,4BAHG,OAKlBsB,EAAUI,GALQ,2CAAH,qDAOH,KAAVpB,GAGJmB,GACD,GAAE,CAACnB,IAOJ,OACE,4BACE,0BACE,SAAC,EAAD,CAAWtB,SARQ,SAAAsB,GACvBe,EAASf,GACTgB,EAAU,GACX,OAQG,SAACM,EAAA,EAAD,CAAYrD,OAAQA,EAAQC,SAAUA,MAG3C,C","sources":["components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.jsx","services/fetchMoviesByKeyword.js","pages/Movies.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <ul>\n      {movies.map(({ title, original_title, id }) => {\n        return (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title || original_title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      original_title: PropTypes.string,\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n/* import PropTypes from 'prop-types'; */\nimport css from './Searchbar.module.css';\n\nconst Searchbar = ({ onSubmit }) => {\n  const [search, setSearch] = useState('');\n  const [prevSearch, setPrevSearch] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  //   const movieName = searchParams.get('query');\n  //   console.log(movieName);\n  console.log(searchParams);\n  const handleChange = event => {\n    setSearch(event.currentTarget.value.toLowerCase());\n    // добавляем параметр поиска в строку запроса с условием\n    if (event.currentTarget.value.toLowerCase() === '') {\n      setSearchParams({});\n    } else {\n      setSearchParams({ query: event.currentTarget.value.toLowerCase() });\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (search.trim() === '') {\n      // если строка пустая и мbl нажали кнопку поиска\n      alert('Please, fill in the input field');\n      return;\n    }\n    // проверка на одинаковое слово\n    if (search === prevSearch) {\n      alert('Same request');\n      setSearch('');\n      return;\n    }\n\n    //  console.log(searchParams);\n\n    onSubmit(search); // props из App которому мbl передаем state из єтого компонента в state App\n    setPrevSearch(search);\n    setSearch(''); // reset\n  };\n\n  return (\n    <div className={css.Searchbar}>\n      <form className={css.SearchForm} onSubmit={handleSubmit}>\n        <input\n          className={css.SearchFormInput}\n          name=\"search\"\n          value={search}\n          onChange={handleChange}\n          type=\"text\"\n          autoComplete=\"on\"\n          autoFocus\n        />\n        <button type=\"submit\" className={css.SearchFormButton}>\n          Search\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Searchbar;\n","import axios from 'axios';\n\nconst API_KEY = 'a4c701b3a41d7d3c7de995b9f81d852d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst fetchMoviesByKeyword = async keyword => {\n  try {\n    const response = await axios.get(`${BASE_URL}/search/movie`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        query: keyword,\n        page: 1,\n        include_adult: false,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport default fetchMoviesByKeyword;\n","import { useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport fetchMoviesByKeyword from 'services/fetchMoviesByKeyword';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const moviesData = await fetchMoviesByKeyword(query);\n      if (moviesData.length === 0) {\n        return alert('No movies by your query');\n      }\n      setMovies(moviesData);\n    };\n    if (query === '') {\n      return;\n    }\n    fetchMovies();\n  }, [query]);\n\n  const handleFormSubmit = query => {\n    setQuery(query);\n    setMovies([]); // для очистки массива фильмов перед выполнением нового поискового запроса\n  };\n\n  return (\n    <div>\n      <div>\n        <Searchbar onSubmit={handleFormSubmit} />\n      </div>\n\n      <MoviesList movies={movies} location={location} />\n    </div>\n  );\n};\nexport default Movies;\n"],"names":["movies","location","map","title","original_title","id","to","state","from","onSubmit","useState","search","setSearch","prevSearch","setPrevSearch","useSearchParams","searchParams","setSearchParams","console","log","className","css","event","preventDefault","trim","alert","name","value","onChange","currentTarget","toLowerCase","query","type","autoComplete","autoFocus","fetchMoviesByKeyword","keyword","axios","params","api_key","language","page","include_adult","response","data","results","setQuery","setMovies","useLocation","useEffect","fetchMovies","moviesData","length","MoviesList"],"sourceRoot":""}